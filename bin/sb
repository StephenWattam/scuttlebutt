#!/usr/bin/env ruby
#
#
# Scuttlebutt main executable
#
# 
#

# -----------------------------------------------------------------------------
# Config

DEFAULT_BROWSER = :firefox

# -----------------------------------------------------------------------------
# Procedures

# Check a file is existent and readable.
def check_file(filename)
  if !File.exist?(filename)
    $stderr.puts "File does not exist: #{filename}"
    exit(1)
  elsif !File.readable?(filename)
    $stderr.puts "File is not readable: #{filename}"
    exit(1)
  end
end


# puts "\n\n*** WARNING: Debug release 9/9/13 --- NOT for production use."
# puts "*** This version opportunistically stores data and doesn't ensure"
# puts "*** consistency row-by-row."
# puts "\n\n"


# -----------------------------------------------------------------------------
# Load libraries and gems
require 'scuttlebutt'
include Scuttlebutt


# -----------------------------------------------------------------------------
# Print usage if no argument is given
if ARGV.length < 3

  if ARGV.length == 1 && ARGV[0].strip.downcase == "--version"
    puts "scuttlebutt #{Scuttlebutt::VERSION}"
    exit(0)
  else


    $stderr.puts "USAGE: #{$PROGRAM_NAME} SCRIPT URL_LIST OUTPUT_FILE [FLAGS]\n"
    $stderr.puts "\nWhere SCRIPT is a Scuttlebutt script,"
    $stderr.puts "      URL_LIST is a CSV containing data for scraping,"
    $stderr.puts "      OUTPUT_FILE is a filepath for CSV output,"
    $stderr.puts "      FLAGS (optional) is one of:"
    $stderr.puts "      d - Output log at debug level"
    $stderr.puts "      q - Be quiet (only log errors)"
    $stderr.puts "      h - Hold terminal open after completion"
    $stderr.puts ""
    exit(1)
  end
end

# Check flags
flags = []
if ARGV[3]
  flags = ARGV[3].downcase.chars.uniq
end

# -----------------------------------------------------------------------------
# Configure at_exit for hold mode
if flags.include?('h')
  at_exit do
    $stderr.puts "\nPress enter to close."
    $stdin.readline
  end
end


check_file(ARGV[0])
check_file(ARGV[1])



# -----------------------------------------------------------------------------
# Configure logs
log_level = flags.include?('d') ? 'debug' : 'info'
log_level = 'error' if flags.include?('q')
LOG.add_log( :default, STDOUT, UI::MultiOutputLogger.string_to_level(log_level) )
LOG.add_log( :debug,   "debug.log", UI::MultiOutputLogger.string_to_level('debug') )
LOG.formatter = proc do |severity, datetime, progname, msg|
  "#{severity.to_s[0]} #{datetime}: #{msg}\n"
end
LOG.info "Scuttlebutt #{VERSION}"
LOG.summarise_logging




# -----------------------------------------------------------------------------
# Load resources from files


begin

  # Read the script from disk
  script = ScriptCompiler.compile(ARGV[0])
  LOG.info "Script read from #{script.filename}"
  LOG.info "Script version: #{script.params.version}" if script.params.version
  LOG.info "Script written by #{script.params.author}" if script.params.author
  LOG.info "Contact details: #{script.params.email}" if script.params.author

  # Create input/output objects and check against script
  input  = Input::CSVSource.new(ARGV[1])
  output = script.params.output_fields ? Output::CSVOutput.new(ARGV[2], script.params.output_fields) : Output::CachedCSVOutput.new(ARGV[2])

  script.check_version(VERSION)
  script.check_input(input)
  script.check_output(output)

  # Apply engine options from the script
  engine = Engine.new(script.params.browser || DEFAULT_BROWSER)

  # Create the execution context
  vm     = VirtualMachine.new(input, output, engine)

  # -----------------------------------------------------------------------------
  # Begin main loop


  # Run the process, using the callback to update the spinner
  vm.run(script)


  # Close input CSV
  input.close

rescue StandardError => e
  LOG.fatal "Fatal error: #{e}"
  LOG.debug "#{e.backtrace.join("\n")}"

ensure
  begin
    engine.close if engine
  rescue 
  end

  if output
    LOG.info "Output has #{output.cached_data} items waiting to write to disk..."
    output.flush
    output.close
  end
end

