#!/usr/bin/env ruby
#
#
# Scuttlebutt main executable
#
# 
#

# -----------------------------------------------------------------------------
# Config

# Width of status messages in bar.
STATUS_WIDTH = 50

# -----------------------------------------------------------------------------
# Procedures

# Check a file is existent and readable.
def check_file(filename)
  if !File.exist?(filename)
    $stderr.puts "File does not exist: #{filename}"
    exit(1)
  elsif !File.readable?(filename)
    $stderr.puts "File is not readable: #{filename}"
    exit(1)
  end
end


# Return a standard-format status line string
def gen_statusline(count_out, string)
  return "[#{count_out}o] #{string}".truncate(STATUS_WIDTH)
end



# -----------------------------------------------------------------------------
# Print usage if no argument is given
if ARGV.length < 3
  $stderr.puts "USAGE: #{$PROGRAM_NAME} SCRIPT URL_LIST OUTPUT_FILE\n"
  $stderr.puts "\nWhere SCRIPT is a Scuttlebutt script"
  $stderr.puts "      URL_LIST is a CSV containing data for scraping"
  $stderr.puts "      OUTPUT_FILE is a filepath for CSV output."
  exit(1)
end

check_file(ARGV[0])
check_file(ARGV[1])


# -----------------------------------------------------------------------------
# Load libraries and gems
require 'scuttlebutt'

# -----------------------------------------------------------------------------
# Load resources from files

# Attach input to file, compile script into an interpreter object
input  = Scuttlebutt::Input::CSVSource.new(ARGV[1])
output = Scuttlebutt::Output::CachedCSVOutput.new(ARGV[2])
engine = Scuttlebutt::Engine.new()
comp   = Scuttlebutt::ScriptCompiler.new(ARGV[0])
vm     = Scuttlebutt::VirtualMachine.new(input, comp.compile, engine, output)

# -----------------------------------------------------------------------------
# Begin main loop


# Start a nice spinner

puts "Progress bar."
sleep 1

bar = Scuttlebutt::UI::CLIProgressBar.new(input.max, true, true)
bar.render_thread(0.1)

# Run the process, using the callback to update the spinner
vm.run(Proc.new do |msg|
    bar.set_status(gen_statusline(output.count, msg))
  end) do |count, row|
    bar.set_status(gen_statusline(output.count, "Processing #{row}"))
    bar.update_abs(count)
end

# Stop the UI
bar.stop_thread

# Close CSV
input.close



# -----------------------------------------------------------------------------
# Flush output
#
puts "Output has #{output.cached_data} items waiting to write to disk..."
output.output



# -----------------------------------------------------------------------------
# Clean up resources
engine.close
