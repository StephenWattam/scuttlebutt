# vim: syntax=ruby


# -- parameters -- 
#  author:           Stephen Wattam
#  email:            stephenwattam@gmail.com
#  browser:          firefox
# *input_fields:     url
#  retries:          5
# -- end --



# ===========================================================================
# Removes quotes from a string by crudely matching them and replacing them
# with nothing.
def calculate_quoteless_body(body_str, quote_strs = [])

    # Sanitise blockquotes
    quote_strs.uniq!
    quote_strs.delete("")

    # Then remove them
    quote_strs.each{ |qstr|
        body_str.gsub!(qstr, '')
    }

    return body_str.strip
end


# ===========================================================================
# Reads a comment thread, using find_comment_data to read the comment details
def read_thread(id)
  debug "Reading thread #{id}..."

  # Return if the id is not set (this occasionally happens due to a
  # placeholder the Guardian set on their page
  return if id == ""

  # Using Xpath, extract fun data
  try{ find_comment_data(id) }

  # Find replies, and look them all up
  replies   = @e.find_elements(:css, "li##{id} ul.d2-responses li, li##{id} ul.d2-responses div#d2-collapse-wrap li")
  replies.map! { |el| el.attribute("id") }

  debug "Found #{replies.length} replies."

  replies.each do |reply_id|
    try{ find_comment_data(reply_id) } 
  end
end


# ===========================================================================
# Read a comment with a given ID from the page, and send it to the output
def find_comment_data(id)
  return if id.to_s.length == 0

  debug "Mining comment #{id}..."

  # Build shorthand paths so the code below is less ugly (less!)
  element_path    = "li##{id} div.d2-comment-inner"
  cpath           = element_path + " div.d2-right-col"

  # Create a handy new hash
  c           = new_output_row()
  c.id        = id
  c.picpath   = @e.find_element(:css, "#{element_path} div.d2-left-col a img").attribute("src")
  c.username  = @e.find_element(:css, "#{cpath} a.d2-username").text
  c.userpage  = @e.find_element(:css, "#{cpath} a.d2-username").attribute("href")
  c.permalink = @e.find_element(:css, "#{cpath} div.d2-permalink p.d2-datetime a").attribute("href")
  c.body      = @e.find_element(:css, "#{cpath} div.d2-body").text.strip
  c.body_noquotes  = calculate_quoteless_body(c.body.dup, @e.find_elements(:css, "#{cpath} div.d2-body blockquote").map{ |el| el.text})
  c.rec_count = try(0){ @e.find_element(:css, "#{cpath} div.d2-js-recommender div.d2-recommend-count b").text.to_i }
  c.reply_to  = try(0){ @e.find_element(:css, "#{cpath} a.d2-in-reply-to").attribute("href").to_s.split("#")[-1] }

  # Page-level variables
  c.article_title  = scratch.title
  c.article_url    = scratch.url
  c.article_date   = scratch.date

  # XXX: at this point we know everything we want, so we can simply push the output 
  # to the output method.
  push_output(c)
end

# ===========================================================================
# Read all comments on a page
def read_comment_data

  top_level_comments = @e.find_elements(:css => "ul.d2-comments li.d2-comment")
  top_level_comments.map! { |el| el.attribute("id").strip }
  top_level_comments.delete(nil)
  top_level_comments.delete("")

  status "Reading #{top_level_comments.length} threads..."

  top_level_comments.each do |element|
    read_thread(element)
  end
end

# ===========================================================================
# Reads comments on a page, then follows the link to the next page, 
# if such a link exists.
def read_then_click_next

  # Read comment data from the current page
  read_comment_data

  status "Moving to next page..."

  # Find the "next" button
  next_link = try{ @e.find_element(:css, "div.d2-next-page a") }


  if next_link

    # Follow the link
    next_link.click

    # Allow the AJAX to catch up
    Time.delay(3)

    # Read more data from the next page
    read_then_click_next
  end
end

# ===========================================================================
# Visit the input address and read comments from the given story.
def row_up

  status "Locating comment section..."

  # Load the article
  @e.get(row.url)

  # Store the title for later use
  scratch.title  = @e.title
  scratch.url    = row.url
  scratch.date   = try{ @e.find_element(:xpath => "//time[@itemprop='datePublished']").attribute("datetime") }

  # Find the source of the iframe
  iframe          = @e.find_element("name" => "d2-iframe")
  comment_url     = iframe.attribute("src")

  status "Selecting comment page..."

  # Load the iframe contents
  @e.get(comment_url)
  # Select "All comments" if not already
  try{
    all_comments_link = @e.find_element(:link_text => "All comments")
    @e.get(all_comments_link.attribute("href"))
  }


  # Show threads in "expanded" mode
  debug "Switching to 'expanded' mode"
  select      = @e.find_element(:name => "threads")
  options     = select.find_elements(:tag_name, "option")
  options.each{|o| 
    o.click if o.attribute("value") =~ /expanded/i
  }
  select.submit


  read_then_click_next

end
