# vim: syntax=ruby

# -- parameters -- 
#  author:           Stephen Wattam
#  email:            stephenwattam@gmail.com
#  browser:          firefox
# *input_fields:     url
#  retries:          5
# 
#  username:         stephenwattam@gmail.com
#  password:         telegraphpassword
# -- end --


# ===========================================================================
def get_permalink(id)

  # Follow the link given
  @e.script("DISQUS.dtpl.actions.fire('comments.permalink', #{id});")
  delay(0.2)

  # Then find the box, and read the input value
  permalink = @e.find_element(:css, "div.dsq-popup-content div.dsq-field input").attribute("value")

  

  # Close the popup
  @e.find_element(:css, "button.dsq-popup-close").click
  delay(0.1)

  return permalink
end


# ===========================================================================
def get_recommendation_count(css)
  # Note that this may not work...
  try{ 
    # Find the element
    recommender_text = @e.find_element(:css, css).text

    # Regex the count out
    if (m = recommender_text.match(/Recommended by (?<count>[0-9]+) people/))
      return m['count'].to_i
    end
  }

  return nil
end


# ===========================================================================
def get_parent_comment(c, root)
  debug "Finding parent comment for #{c.id} (#{root})"


  # Find current indent and identify ancestors
  current_indent = @e.find_element(:css, root).location.x
  # debug "--> #{current_indent} -- #{scratch.comment_stack}"
  scratch.comment_stack.delete_if { |cmt| cmt[:indent] >= current_indent }

  # Record the immediate parent only
  parent = nil
  if scratch.comment_stack.length > 0
    debug "Found parent: #{scratch.comment_stack.last[:id]}"
    parent = scratch.comment_stack.last[:id]
  end

  # Add self to the list
  scratch.comment_stack.push({id: c.id, indent: current_indent})

  return parent
end


# ===========================================================================
def read_single_comment(id)


  debug "Reading comment #{id}"

  # Shorten later data extraction
  root = "div#dsq-comment-body-#{id}"

  # Get a new output row and add stuff to it
  c = new_output_row
  c.id        = id
  c.picpath   = @e.find_element(:css, "#{root} div.dsq-avatar img").attribute("src")
  c.username  = @e.find_element(:css, "#{root} div.dsq-comment-header p .dsq-commenter-name").text
  c.time      = @e.find_element(:css, "#{root} div.dsq-comment-header p a:not(.dsq-commenter-name)").text
  c.permalink = get_permalink(c.id)
  c.body      = @e.find_element(:css, "div#dsq-comment-text-#{id}").text
  c.rec_count = get_recommendation_count("a#dsq-comment-like-count-#{id}")
  c.reply_to  = get_parent_comment(c, root)

  # Article details
  c.article_url   = scratch.url
  c.article_title = scratch.title

  # Submit.
  push_output(c)

end


# ===========================================================================
def read_comment_data

  # First find all comments and extract numeric ID
  comments = @e.find_elements(:css, "li.dsq-comment")

  # debug_console(binding)

  comments.map! do |e| 
    if (m = e.attribute("id").match(/dsq-comment-(?<idnum>[0-9]+)$/))
      m['idnum']    
    else
      nil
    end
  end
  comments.delete(nil)

  comments.each do |id|
    try{ read_single_comment(id) }
  end
end


# ===========================================================================
def read_then_click_next


  # Read comment data from the current page
  read_comment_data

  # Find the "next" button, or fall out if none exists
  prev_page = tryquit{ @e.find_element(:css, "li.dsq-numbered-pagination span.current_page").text.to_i }

  status "Moving to page #{prev_page + 1}"

  # Manually fire javascript
  @e.script("DISQUS.dtpl.actions.fire(\"thread.paginate\", #{prev_page + 1});")
  Time.delay(3)

  # Find which page we have moved to.
  # IF this is below the previous page, it means we have wrapped around, so drop out
  # and reached the end, so drop out
  page = tryquit { @e.find_element(:css, "li.dsq-numbered-pagination span.current_page").text.to_i }

  if page > prev_page 
    read_then_click_next
  end
end


# ===========================================================================
def row_up

  status "Reading article data"

  # Load the article
  @e.get(row.url)

  # Store the title for later use
  scratch.title  = @e.title
  scratch.url    = row.url

  # See if comments even exist
  if try{ @e.find_element(:id, "disqus_thread") }

    # Pause auto-updating
    autoupdate_status = @e.find_element(:id, "dsq-realtime-status").text
    if autoupdate_status == "enabled"
      # Sometimes the link isn't there...
      if !try{ @e.find_element(:id, "dsq-realtime-toggle").click }
        warn "Failed to turn realtime updates off (this might cause problems)!"
      end
    end

    # Record the comment tree
    scratch.comment_stack = []

    # Loop, reading each page of comments
    read_then_click_next

  else
    warn "No comments section found"
  end

end


# ===========================================================================
# Log in using the supplied username and password
def system_up
  status "Logging in as #{params.username}"

  @e.get("http://www.telegraph.co.uk")

  # Click login
  @e.find_element(:css, "span#loginButton").click

  # Wait
  delay(2)

  # Switch to the iframe
  @e.switch_to.frame(@e.find_element(:css, "#guestFrame1"))

  # Populate form
  @e.find_element(:css, "input#email").send_keys(params.username)
  @e.find_element(:css, "input#password-con").send_keys(params.password)

  # Then log in
  @e.find_element(:css, "input#email").submit
end




# ===========================================================================
# Log out
def system_down
  status "Logging out."

  @e.get("http://www.telegraph.co.uk")

  try{ @e.find_element(:css, "#samLogOutButton").click }
end
